Обобщенные классы могут быть частью иерархии классов, как и любые другие необобщенные классы.
Это означает, что обобщенный класс может действовать в качестве суперкласса или подкласса.
Главное отличие обобщенных иерархий от необобщенных состоит в том, что в обобщенной иерархии любые
аргументы типа, требующиеся обобщенному * суперклассу* , должны передаваться всеми подклассами вверх
по иерархии. Это похоже на порядок передачи аргументов конструкторам вверх по иерархии.

Применение обобщенного суперкласса

Приведем пример иерархии, в которой применяется обобщенный суперкласс.
// Простая иерархия обобщенных классов
class Gen<T> {
 Т оb;

 Gen (Т о) {
    оb = о;
 }

 // возвратить объект оb
 T getOb() {
    return оb;
 }
}
// Подкласс, производный от класса Gen
class Gen2<T> extends Gen<T> {
  Gen2 (Т о) {
    super (о);
  }
}
В этой иерархии класс Gen2 расширяет обобщенный класс Gen.

Обратите внимание на объявление класса Gen2 в следующей строке кода:
class Gen2<T> extends Gen<T> {
}

Параметр типа T указан в объявлении класса Gen2 и передается классу Gen в выражении extends.
Это означает, что тип, передаваемый классу Gen2, будет также передан классу Gen.
Например, в объявлении
Gen2<Integer> num = new Gen2<Integer>(100);

тип Integer передается в качестве параметра типа классу Gen. Таким образом, объект оb в части
Gen класса Gen2 будет иметь тип Integer. Следует также иметь в виду, что параметр типа
T используется в классе Gen2 только для поддержки его суперкласса * Gen*. Даже если подкласс
обобщенного суперкласса не должен быть обобщенным, в нем все равно должны быть указаны
параметры типа, требующиеся его обобщенному суперклассу. Если требуется, то подкласс может
быть дополнен и своими параметрами типа.