Метасимвольный аргумент обозначается знаком "?" и представляет неизвестный тип.

Метасимвольные аргументы (wildcard arguments) в Java используются для обозначения неопределенного типа данных
в параметрах типизированных классов или методов. Они позволяют создавать более гибкие и универсальные классы
или методы, которые могут работать с разными типами данных. Метасимвольные аргументы обозначаются символом
вопросительного знака ? и могут использоваться с ограничениями для обеспечения безопасности типов.

Вот несколько примеров применения метасимвольных аргументов:

1. Неограниченный метасимвол (?):
Вы можете использовать неограниченный метасимвол ? для представления неизвестного типа. Это полезно,
когда вам не важно, какой конкретный тип данных используется, и вам нужна просто гибкость:
public void processList(List<?> list) {
    // Вы можете читать элементы из списка, но не можете добавлять в него.
}

2. Ограничение сверху (Upper Bounded Wildcard):
тип и все его подклассы (верхняя граница)
Вы можете использовать метасимвол с ограничением сверху, чтобы указать, что тип данных должен
быть каким-то подтипом другого типа:
public double sum(List<? extends Number> numbers) {
    double total = 0;
    for (Number number : numbers) {
        total += number.doubleValue();
    }
    return total;
}

Параметризованный тип который использует метасимвол с ограничением сверху (extends) представляет собой
список элементов, которые являются подтипами типа Number. То есть, вы можете читать элементы из
такого списка, но не можете добавлять в него элементы, так как не известно конкретное подтипы Number.
Пример использования List<? extends Number>:
List<? extends Number> numbers = new ArrayList<>();
Number number = numbers.get(0); // Можно читать элементы, которые являются подтипами Number

В этом примере numbers объявлен как List<? extends Number>, и вы можете безопасно читать элементы из списка,
так как они гарантированно являются подтипами Number. Однако, вы не можете добавлять элементы в такой список,
так как неизвестно, какой конкретный подтип Number используется в списке.

3. Ограничение снизу (Lower Bounded Wildcard):
тип и все его суперклассы (нижняя граница)
Метасимвол с ограничением снизу используется, чтобы указать, что тип данных должен быть
супертипом другого типа:
public void copyElements(List<? super Integer> dest, List<? extends Integer> source) {
    for (Integer item : source) {
        dest.add(item);
    }
}

List<? super Integer> - это параметризованный тип в Java, который использует метасимвол с ограничением снизу
(super). Он представляет собой список, в который можно добавлять элементы типа Integer или его супертипы.

Пример использования List<? super Integer>:
Предположим, у нас есть метод, который принимает List и добавляет в него элементы:
public void addIntegers(List<? super Integer> list) {
    list.add(42);
}

Теперь мы можем использовать этот метод для добавления элементов в список с параметром
типа List<? super Integer>. Этот список может быть списком Integer, Number, Object и другими
супертипами Integer:
List<Integer> integerList = new ArrayList<>();
List<Number> numberList = new ArrayList<>();
List<Object> objectList = new ArrayList<>();

addIntegers(integerList); // Работает
addIntegers(numberList);  // Работает
addIntegers(objectList);  // Работает

Таким образом, мы можем использовать один метод addIntegers для добавления целых чисел
в различные списки, которые могут содержать элементы супертипа Integer.


Метасимвольные аргументы облегчают создание универсальных методов и классов,
которые могут работать с различными типами данных, при этом обеспечивая безопасность типов данных.
Они часто используются в библиотеках и API для создания гибких и переиспользуемых компонентов.