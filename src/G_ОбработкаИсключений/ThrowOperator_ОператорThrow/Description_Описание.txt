Оператор throw в Java используется для явного создания и генерации исключений
внутри кода программы.
Когда оператор throw выполняется, он указывает на возникновение определенной ситуации,
которая требует обработки.
Это позволяет программистам создавать собственные пользовательские исключения
или выбрасывать системные исключения для предупреждения о проблемах в программе.

Синтаксис оператора throw:
throw выражение;
Где выражение может быть объектом исключения или его подклассом.
Обычно вы используете оператор throw в следующих случаях:

1. Генерация пользовательских исключений:
Вы можете создать свой собственный класс исключения, наследующийся от Throwable,
и использовать оператор throw, чтобы создать и выбросить экземпляр этого исключения в коде.

Пример генерации пользовательского исключения:
class MyException extends Exception {
    public MyException(String message) {
        super(message);
    }
}

public class Main {
    public static void main(String[] args) {
        try {
            throw new MyException("Это пользовательское исключение.");
        } catch (MyException e) {
            System.out.println("Исключение поймано: " + e.getMessage());
        }
    }
}

2. Генерация системных исключений:
Вы можете использовать оператор throw, чтобы генерировать стандартные системные исключения,
такие как NullPointerException, ArithmeticException, IOException и другие,
когда возникают определенные условия.

Пример генерации системного исключения:
public class Main {
    public static void main(String[] args) {
        int denominator = 0;
        try {
            if (denominator == 0) {
                throw new ArithmeticException("Деление на ноль недопустимо.");
            }
            int result = 10 / denominator;
        } catch (ArithmeticException e) {
            System.out.println("Исключение поймано: " + e.getMessage());
        }
    }
}

Оператор throw полезен, когда вам нужно явно указать на ошибку или некорректное состояние
в вашей программе и сообщить об этом обработчику исключений для соответствующей обработки.
