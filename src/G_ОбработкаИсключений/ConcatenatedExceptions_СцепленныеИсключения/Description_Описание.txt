В Java сцепленные исключения (chained exceptions) позволяют вам связывать два исключения вместе,
чтобы сохранить информацию о том, что одно исключение было вызвано другим.
Это особенно полезно, когда внутреннее исключение (причина) может быть более полезным
для понимания проблемы, но вы все равно хотите сообщить об общей ошибке.

Вы можете сцеплять исключения с помощью конструктора класса Throwable,
который принимает два аргумента: исключение и его причину.
Вот как это можно сделать:
try {
    // Код, который может вызвать исключение
} catch (IOException e) {
    // Создание нового исключения с причиной
    MyCustomException customException = new MyCustomException("Произошла ошибка ввода-вывода");
    customException.initCause(e); // Связываем сцепленное исключение с исходным исключением
    throw customException; // Бросаем новое исключение
}
В этом примере, если возникает исключение IOException, то мы создаем новое собственное
исключение MyCustomException, указывая его сообщение и затем с помощью initCause
связываем его с исходным исключением e.
Затем новое исключение customException бросается далее для обработки или логирования.

Сцепленные исключения полезны, когда вы хотите сохранить информацию об исходной
причине ошибки и передать ее выше по стеку вызовов,
чтобы облегчить отладку и понимание происходящего в коде.