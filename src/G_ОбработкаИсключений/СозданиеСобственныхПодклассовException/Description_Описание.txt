В Java вы можете создавать собственные подклассы исключений на основе классов Exception
или его подклассов.
Создание собственных исключений позволяет вам более точно определить и обработать
специфические ситуации или ошибки в вашем коде.
Вот как вы можете создать свой собственный подкласс исключения:
1. Создайте класс-подкласс исключения:
Вы должны создать новый класс, который наследуется от класса Exception или его подклассов,
например, RuntimeException, если вы хотите создать непроверяемое исключение.
Ваш класс-подкласс должен иметь конструкторы, как у его суперклассов,
и может содержать дополнительные поля и методы, если это необходимо.
Вот пример создания собственного проверяемого исключения:
public class MyCustomException extends Exception {
    public MyCustomException() {
        super();
    }

    public MyCustomException(String message) {
        super(message);
    }
}
В этом примере MyCustomException наследуется от Exception и имеет два конструктора:
один без аргументов и один с аргументом сообщения.

2. Используйте ваше собственное исключение:
После создания собственного исключения вы можете использовать его в вашем коде,
чтобы сигнализировать о специфических ситуациях или ошибках.
Пример использования:
public class CustomExceptionExample {
    public static void main(String[] args) {
        try {
            throwCustomException();
        } catch (MyCustomException e) {
            System.err.println("Поймано собственное исключение: " + e.getMessage());
        }
    }

    public static void throwCustomException() throws MyCustomException {
        // Генерируем исключение с использованием собственного исключения
        throw new MyCustomException("Специфическая ситуация произошла!");
    }
}
В этом примере метод throwCustomException бросает собственное исключение MyCustomException,
которое затем перехватывается в блоке catch в методе main.

Создание собственных исключений позволяет вам лучше структурировать обработку ошибок и явно
определять, какие ситуации требуют специфической обработки в вашем приложении.