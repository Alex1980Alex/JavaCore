В Java вы можете использовать несколько блоков catch для обработки различных типов исключений
в одной конструкции try-catch.
При этом исключения будут обрабатываться в порядке их объявления,
и первый соответствующий блок catch будет выполнен.
Вот пример использования нескольких конструкций catch:
public class Main {
    public static void main(String[] args) {
        try {
            // Код, который может вызвать исключение
            int[] arr = new int[3];
            int result = arr[5] / 0; // Может вызвать ArrayIndexOutOfBoundsException и ArithmeticException
        } catch (ArrayIndexOutOfBoundsException e) {
            // Обработка исключения ArrayIndexOutOfBoundsException
            System.out.println("Индекс вне диапазона массива.");
        } catch (ArithmeticException e) {
            // Обработка исключения ArithmeticException
            System.out.println("Деление на ноль.");
        } catch (Exception e) {
            // Обработка исключений, которые не подходят под предыдущие блоки catch
            System.out.println("Произошла ошибка: " + e.getMessage());
        }
    }
}

В этом примере используются три блока catch:
- Первый блок catch обрабатывает ArrayIndexOutOfBoundsException, которое возникает
при попытке доступа к элементу массива с недопустимым индексом.
- Второй блок catch обрабатывает ArithmeticException, которое возникает при делении на ноль.
- Третий блок catch обрабатывает Exception, который является базовым классом для всех исключений.
Этот блок будет выполнен, если ни один из предыдущих блоков catch не соответствует
типу возникшего исключения.

Порядок блоков catch имеет значение:
более специфичные исключения (которые являются подклассами) должны идти перед менее специфичными.
Если блок catch для конкретного исключения не найден, будет выполнен блок catch для
ближайшего суперкласса исключения.

Использование нескольких блоков catch позволяет обработать разные типы исключений разными
способами и предоставить более точные сообщения об ошибках пользователю.