В Java вложенные классы представляют собой классы, которые определены внутри других классов.
Вложенные классы могут быть статическими (статическими вложенными классами)
или нестатическими (внутренними классами).

- Статические вложенные классы (Static Nested Classes):
Статический вложенный класс является членом внешнего класса, но он объявлен как статический и,
следовательно, не имеет доступа к нестатическим членам внешнего класса.
Статические вложенные классы полезны, когда вы хотите группировать связанные классы
в одном файле и изолировать их друг от друга.
Вы можете создать объект статического вложенного класса без создания объекта внешнего класса:
OuterClass.StaticNestedClass nestedObj = new OuterClass.StaticNestedClass();

- Внутренние классы (Inner Classes):
Внутренний класс является нестатическим вложенным классом,
и он имеет доступ к нестатическим членам внешнего класса, включая его приватные члены.
Внутренние классы полезны, когда вам нужно создать класс, который тесно связан с внешним классом.
Для создания объекта внутреннего класса, вы должны сначала создать объект внешнего класса,
а затем создать объект внутреннего класса через этот объект:
OuterClass outerObj = new OuterClass();
OuterClass.InnerClass innerObj = outerObj.new InnerClass();
. Члены внутреннего класса известны только в рамках области действия внутреннего класса
и не могут использоваться внешним классом.

- Локальные классы (Local Classes):
Локальные классы определяются внутри методов, конструкторов или блоков кода.
Они имеют доступ к переменным метода, в котором они определены,
но могут быть использованы только в пределах этого метода.
Локальный класс может быть создан и использован только внутри метода.

- Анонимные классы (Anonymous Classes):
Анонимные классы - это безымянные классы, которые создаются и используются одновременно
при создании объекта.
Они обычно используются для реализации интерфейсов или абстрактных классов.

Использование вложенных классов в Java позволяет логически группировать классы
и обеспечивать более чистый и организованный код, а также контролировать доступ
к членам внешних классов.