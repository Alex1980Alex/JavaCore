Особое значение для ясного представления о том, каким образом лямбда-выражения реализованы в Java,
имеют две языковые конструкции.
Первой из них является само лямбда-выражение, а второй - функциональный интерфейс.
Начнем с простого определения каждой из этих конструкций.

Лямбда-выражение, по существу, является анонимным (т.е. безымянным) методом. Но этот метод не
выполняется самостоятельно, а служит для реализации метода, определяемого в функциональном интерфейсе.
Таким образом, лямбдавыражение приводит к некоторой форме анонимного класса. Нередко лямбда-выражения
называют также замыканиями.

Функциональным называется такой интерфейс, который содержит один и только один абстрактный метод.
Как правило, в таком методе определяется предполагаемое назначение интерфейса. Следовательно,
функциональный интерфейс представляет единственное действие. Например, стандартный интерфейс
Runnable является функциональным, поскольку в нем определяется единственный метод run(), который,
в свою очередь, определяет действие самого интерфейса Runnable. Кроме того, в функциональном
интерфейсе определяется целевой тип лямбда-выражения. В связи с этим необходимо подчеркнуть следующее:
лямбда-выражение можно использовать только в том контексте, в котором определен его целевой тип.
И еще одно замечание: функциональный интерфейс иногда еще называют SАМ-типом, где сокращение
SAM обозначает Single Abstract Method - единственный абстрактный метод.

На заметку В функциональном интерфейсе можно определить любой открытый метод, определенный в
классе Object, например метод equals() , не воздействуя на состояние его функционального интерфейса.
Открытые методы из класса Object считаются неявными членами функционального интерфейса,
поскольку они автоматически реализуются экземпляром функционального интерфейса.