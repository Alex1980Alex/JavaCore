Как пояснялось ранее, функциональным называется такой интерфейс, в котором определяется единственный
абстрактный метод. Те, у кого имеется предыдущий опыт программирования на Java, могут возразить,
что все методы интерфейса неявно считаются абстрактными, но так было до внедрения лямбда-выражений.
Как пояснялось в главе 9, начиная с версии JDK 8, для метода, объявляемого в интерфейсе, можно определить
стандартное поведение по умолчанию, и поэтому он называется методом с реализацией по умолчанию.
Отныне метод интерфейса считается абстрактным лишь в том случае, если у него отсутствует реализация по умолчанию.
А поскольку нестатические, незакрытые и не реализуемые по умолчанию методы интерфейса неявно считаются
абстрактными, то их не обязательно объявлять с модификатором доступа abstract, хотя это и можно сделать
при желании.

Ниже приведен пример объявления функционального интерфейса.
interface MyNumber {
    double getValue();
}
В данном примере метод getValue() неявно считается абстрактным и единственным, определяемым в интерфейсе
MyNumber. Следовательно, интерфейс MyNumber является функциональным, а его функция определяется методом
getValue().

Как упоминалось ранее, лямбда-выражение не выполняется самостоятельно, а скорее образует реализацию абстрактного
метода, определенного в функциональном интерфейсе, где указывается его целевой тип. Таким образом,
лямбдавыражение может быть указано только в том контексте, в котором определен его целевой тип. Один из таких
контекстов создается в том случае, когда лямбда-выражение присваивается ссылке на функциональный интерфейс.
К числу других контекстов целевого типа относятся инициализация переменных, операторы return и аргументы
методов.

Рассмотрим пример, демонстрирующий применение лямбда-выражения в контексте присваивания. С этой целью сначала
объявляется ссылка на функциональный интерфейс MyNurnber, как показано ниже.
// создать ссылку на функциональный интерфейс MyNumber
MyNumber myNum;

Затем лямбда-выражение присваивается этой ссылке на функциональный интерфейс следующим образом:
// использовать лямбда-выражение в контексте присваивания
myNum = () -> 123.45;

Когда лямбда-выражение появляется в контексте своего целевого типа, автоматически создается экземпляр класса,
реализующего функциональный интерфейс, причем лямбда-выражение определяет поведение абстрактного метода,
объявляемого в функциональном интерфейсе. А когда этот метод вызывается через свой адресат, выполняется
лямбда-выражение. Таким образом, лямбда-выражение позволяет преобразовать сегмент кода в объект.

В предыдущем примере лямбда-выражение становится реализацией метода getValue().
В итоге получается значение константы 123.45, которое выводится на экран следующим образом:

// вызвать метод getValue(), реализуемый присвоенным ранее лямбда-выражением
System.out.println(myNum.getValue());

Лямбда-выражение было ранее присвоено переменной myNum ссылки на функциональный интерфейс MyNumber.
Оно возвращает значение константы 123.45, которое получается в результате вызова метода getValue().

Чтобы лямбда-выражение использовалось в контексте своего целевого типа, абстрактный метод и лямбда-выражение
должны быть совместимыми по типу. Так, если в абстрактном методе указываются два параметра типа int,
то и в лямбдавыражении должны быть указаны два параметра, тип которых явно обозначается как int или
неявно выводится как int из самого контекста. В общем, параметры лямбда-выражения должны быть совместимы
по типу и количеству с параметрами абстрактного метода. Это же относится и к возвращаемым типам.
А любые исключения, генерируемые в лямбда-выражении, должны быть приемлемы для абстрактного метода.

/**
 * В данном примере метод getValue() неявно считается абстрактным
 * и единственным, определяемым в интерфейсе MyNumber.
 * Следовательно, интерфейс MyNumber является функциональным,
 * а его функция определяется методом getValue().
 */
public interface MyNumber {
    double getValue();
}

public class LambdaMyNumber {
    public static void main(String[] args) {
        // создать ссылку на функциональный интерфейс MyNumber
        MyNumber myNumber;

        // использовать лямбда-выражение в контексте присваивания
        myNumber = () -> 123.45;

        System.out.println(myNumber.getValue());
    }
}