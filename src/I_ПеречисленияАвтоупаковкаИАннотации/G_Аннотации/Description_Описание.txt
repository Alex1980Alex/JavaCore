Аннотации (англ. annotations) в Java представляют собой специальные метаданные,
которые можно добавлять к классам, методам, полям и другим элементам кода,
чтобы предоставить дополнительную информацию о программе или указать её поведение.
Аннотации начинаются с символа "@", за которым следует имя аннотации.

В Java существует несколько встроенных аннотаций, таких как:

1. @Override: Эту аннотацию используют перед методом, чтобы указать,
что метод переопределяет метод из суперкласса.
@Override
public void someMethod() {
    // код метода
}
2. @Deprecated: Помечает элемент кода (например, метод или класс) как устаревший.
Это предупреждение для разработчиков о том, что этот элемент следует избегать.
@Deprecated
public void oldMethod() {
    // код метода
}
3. @SuppressWarnings: Эту аннотацию используют для подавления предупреждений компилятора.
Например, чтобы скрыть предупреждение о необработанных исключениях.
@SuppressWarnings("unchecked")
public void someMethod() {
    // код метода
}

Вы также можете создавать собственные аннотации в Java, объявляя их с использованием ключевого слова
@interface. Это позволяет вам создавать пользовательские аннотации,
чтобы описывать дополнительные метаданные для ваших классов и методов.

Пример создания собственной аннотации:
import java.lang.annotation.*;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface MyAnnotation {
    String value() default "default value";
    int count() default 0;
}
Затем вы можете использовать вашу собственную аннотацию в коде:
@MyAnnotation(value = "Custom annotation", count = 5)
public void someMethod() {
    // код метода
}

Аннотации могут быть также задействованы в рефлексии (reflection) для анализа и изменения программы
во время выполнения. Они широко используются в фреймворках и библиотеках для предоставления
дополнительной информации и управления поведением кода.
