В Java, оболочки типов (wrapper classes) представляют собой классы, которые инкапсулируют
примитивные типы данных.
Эти классы предоставляют методы и функциональность для работы с примитивами как объектами.
Оболочки типов часто используются в ситуациях, когда примитивные типы не могут быть использованы,
например, когда требуется объект вместо примитива, такой как коллекции (как ArrayList или HashMap),
обобщенные типы, или когда требуется работа с null-значениями.

Вот основные оболочки примитивных типов и их соответствующие примитивы:
Integer - для int
Long - для long
Short - для short
Byte - для byte
Double - для double
Float - для float
Character - для char
Boolean - для boolean

Примеры использования оболочек типов:
// Использование Integer для int
Integer целоеЧисло = 42;

// Использование Boolean для boolean
Boolean флаг = true;

// Использование Double для double
Double дробь = 3.14;

// Использование Character для char
Character символ = 'A';

// Работа с коллекциями, которые требуют объектов, например, ArrayList
List<Integer> список = new ArrayList<>();
список.add(1);
список.add(2);

Оболочки типов также предоставляют методы для преобразования между примитивными типами
и объектами-оболочками, а также для выполнения операций, таких как сравнение и арифметика.

Например:
Integer целоеЧисло = 42;
int примитив = целоеЧисло.intValue(); // Преобразование в int

Double дробь1 = 3.14;
Double дробь2 = 2.5;
Double сумма = дробь1 + дробь2; // Арифметическая операция

Оболочки типов также имеют константы, представляющие специальные значения,
такие как Integer.MAX_VALUE, Integer.MIN_VALUE, Double.NaN, и другие.

Эти классы обеспечивают удобные способы работы с примитивными типами
в контексте объектов и широко используются в Java.

Класс Character в Java является оболочкой (wrapper class) для примитивного типа данных char.
Он предоставляет набор методов и констант для работы с символами (значениями типа char) как с объектами.
В настоящее время для получения объекта Character настоятельно рекомендуется применять статический
метод valueOf() :
static Character valueOf ( char символ)
Метод valueOf() возвращает объект Character, содержащий внутри себя символ из ch.

Класс Boolean в Java является оболочкой (wrapper class) для примитивного типа данных boolean.
Он предоставляет набор методов и констант для работы с логическими значениями true и false как с объектами.
На сегодняшний день для получения объекта Boolean настоятельно рекомендуется применять статический метод
valueOf().
Методы преобразования: boolean booleanValue() - возвращает значение boolean, представленное объектом Boolean.

Оболочки числовых типов (numeric wrapper classes) в Java представляют собой классы, которые инкапсулируют
примитивные числовые типы данных, такие как целые числа и числа с плавающей запятой,
и предоставляют методы и функциональность для работы с ними как с объектами.
Эти оболочки полезны, например, когда вам нужно работать с числовыми значениями как с объектами,
например, в контексте коллекций (например, ArrayList) или в качестве аргументов для методов, ожидающих объекты.

Вот наиболее часто используемые оболочки числовых типов и их соответствующие примитивы:
Byte - для byte
Short - для short
Integer - для int
Long - для long
Float - для float
Double - для double

Каждый из этих классов обеспечивает набор методов и констант, позволяющих работать с числовыми данными.
Вот несколько примеров:

Методы преобразования:
byteValue(), shortValue(), intValue(), longValue(), floatValue(), doubleValue()
- возвращают соответствующее примитивное значение.

Сравнение:
equals(Object obj) - сравнивает оболочку с другим объектом на равенство.
compareTo(T another) - сравнивает две оболочки числовых типов и возвращает результат сравнения.

Создание объектов:
static T valueOf(String s) - создает объект оболочки из строки.

Константы:
static T MIN_VALUE - минимальное значение для данного числового типа.
static T MAX_VALUE - максимальное значение для данного числового типа.

Примеры использования оболочек числовых типов:
Integer целоеЧисло = Integer.valueOf(42);
Double дробь = Double.valueOf(3.14);

if (целоеЧисло > 10) {
    System.out.println("Целое число больше 10.");
}

byte примитив = целоеЧисло.byteValue();
System.out.println("Примитивное значение целого числа: " + примитив);

Эти классы обеспечивают удобный способ работы с числовыми данными как
с объектами в Java, что может быть полезно в различных сценариях программирования.
