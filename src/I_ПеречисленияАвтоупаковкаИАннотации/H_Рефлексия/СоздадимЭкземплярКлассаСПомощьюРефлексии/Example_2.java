package I_ПеречисленияАвтоупаковкаИАннотации.H_Рефлексия.СоздадимЭкземплярКлассаСПомощьюРефлексии;
// Этот способ создания объектов с использованием рефлексии может быть полезным,
// когда вы хотите создать экземпляр класса, имя которого известно только во время выполнения,
// и когда у вас есть доступ к его имени как строке.
// Однако следует учесть, что newInstance() является устаревшим методом, начиная с версии Java 9,
// и рекомендуется использовать более современные методы создания объектов,
// такие как использование конструкторов или фабрик.
public class Example_2 {
    public static void main(String[] args) {
        MyClass_2 myClass = null;
        try {
            // Этот код использует рефлексию для динамического создания экземпляра класса MyClass_2
            // - Class.forName(MyClass_2.class.getName()): Эта строка получает имя класса MyClass_2
            // с использованием MyClass_2.class.getName(), затем вызывает Class.forName(),
            // чтобы получить объект класса Class, представляющий класс MyClass_2.
            // То есть, мы динамически загружаем класс MyClass_2 с использованием его имени.
            // - clazz.newInstance(): Этот вызов создает новый объект, экземпляр класса,
            // представленного объектом clazz. Для того чтобы использовать newInstance(),
            // класс должен иметь конструктор без аргументов (пустой конструктор).
            Class clazz = Class.forName(MyClass_2.class.getName());
            // Здесь созданный объект приводится к типу MyClass_2 и присваивается переменной myClass.
            // Теперь myClass содержит экземпляр класса MyClass_2, который был создан динамически с
            // использованием рефлексии.
            myClass = (MyClass_2) clazz.newInstance();
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
            e.printStackTrace();
        }
        System.out.println(myClass);//output created object reflection.MyClass@60e53b93
    }
}
