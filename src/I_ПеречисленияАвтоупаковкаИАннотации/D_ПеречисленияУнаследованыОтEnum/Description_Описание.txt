В Java все перечисления на самом деле являются неявно унаследованными от класса Enum.
Когда вы создаете перечисление, Java автоматически добавляет наследование от Enum к вашему перечислению.
Вот как это выглядит:
enum ДниНедели {
    ПОНЕДЕЛЬНИК, ВТОРНИК, СРЕДА, ЧЕТВЕРГ, ПЯТНИЦА, СУББОТА, ВОСКРЕСЕНЬЕ
}
Компилятор Java превращает это в примерно следующий код:
final class ДниНедели extends Enum<ДниНедели> {
    public static final ДниНедели ПОНЕДЕЛЬНИК;
    public static final ДниНедели ВТОРНИК;
    public static final ДниНедели СРЕДА;
    // ... остальные значения перечисления ...

    // Здесь идут статические блоки и методы, генерируемые компилятором

    private ДниНедели(String name, int ordinal) {
        super(name, ordinal);
    }

    public static ДниНедели[] values() {
        // Метод, который возвращает массив всех значений перечисления
    }

    public static ДниНедели valueOf(String name) {
        // Метод, который возвращает значение перечисления по имени
    }
}

Как видно из приведенного выше кода, перечисление ДниНедели наследует от класса Enum<ДниНедели>.
Класс Enum предоставляет базовую функциональность для всех перечислений,
такую как управление имени и порядковыми номерами значений, а также методы values() и valueOf().
Этот подход делает перечисления в Java мощными и гибкими инструментами для работы с наборами констант.

Методы ordinal(), compareTo(), и equals() -
это методы, которые можно использовать для работы с перечислениями (enums) в Java.

1. Метод ordinal():
Метод ordinal() возвращает порядковый номер (индекс) константы в перечислении, начиная с 0.
Например, если у вас есть перечисление ДниНедели, то вызов ordinal() для каждой константы
вернет ее позицию в перечислении.

Пример:
enum ДниНедели {
    ПОНЕДЕЛЬНИК, ВТОРНИК, СРЕДА, ЧЕТВЕРГ, ПЯТНИЦА, СУББОТА, ВОСКРЕСЕНЬЕ
}

public class ПримерOrdinal {
    public static void main(String[] args) {
        ДниНедели день = ДниНедели.СРЕДА;
        int порядковыйНомер = день.ordinal();
        System.out.println("Порядковый номер " + день + ": " + порядковыйНомер);
    }
}

2. Метод compareTo():
Метод compareTo() сравнивает два элемента перечисления по их порядковым номерам (ordinal values).
Возвращает отрицательное значение, если вызывающий элемент (this) находится перед переданным элементом,
положительное значение, если после, и ноль, если элементы равны.

Пример:
ДниНедели день1 = ДниНедели.СРЕДА;
ДниНедели день2 = ДниНедели.ПЯТНИЦА;

int результатСравнения = день1.compareTo(день2);

if (результатСравнения < 0) {
    System.out.println(dень1 + " идет перед " + день2);
} else if (результатСравнения > 0) {
    System.out.println(dень1 + " идет после " + день2);
} else {
    System.out.println(dень1 + " и " + день2 + " равны");
}

3. Метод equals():
   Метод equals() позволяет сравнивать два элемента перечисления на равенство.
   По умолчанию, метод equals() для перечислений сравнивает ссылки на объекты,
   поэтому он эквивалентен оператору ==. Если вы хотите сравнивать перечисления
   на равенство по их значениям, вам нужно переопределить метод equals() в вашем перечислении.

Пример:
enum ДниНедели {
    ПОНЕДЕЛЬНИК, ВТОРНИК, СРЕДА, ЧЕТВЕРГ, ПЯТНИЦА, СУББОТА, ВОСКРЕСЕНЬЕ
}

public class ПримерEquals {
    public static void main(String[] args) {
        ДниНедели день1 = ДниНедели.ПОНЕДЕЛЬНИК;
        ДниНедели день2 = ДниНедели.ПОНЕДЕЛЬНИК;

        boolean равны = день1.equals(день2);

        if (равны) {
            System.out.println(день1 + " и " + день2 + " равны");
        } else {
            System.out.println(день1 + " и " + день2 + " не равны");
        }
    }
}
Это основные методы, которые можно использовать для сравнения и получения информации
 о элементах перечисления в Java.