Наследование - это один из основных принципов объектно-ориентированного программирования (ООП)
в Java.
Оно позволяет создавать новые классы на основе существующих классов,
наследуя их свойства и методы.

Вот основы наследования в Java:
- Определение базового класса (родительского класса):
Вы начинаете с создания класса, который будет служить базовым для других классов.
Этот класс называется родительским (базовым) классом или суперклассом.
public class Animal {
    String name;

    public void eat() {
        System.out.println(name + " is eating.");
    }
}
}
- Создание подклассов:
Затем вы можете создавать новые классы, называемые подклассами или дочерними классами,
которые наследуют свойства и методы родительского класса.
Вы указываете наследование с помощью ключевого слова extends.
public class Dog extends Animal {
    public void bark() {
        System.out.println(name + " is barking.");
    }
}
В этом примере класс Dog наследует от класса Animal.
- Использование наследованных свойств и методов:
Подклассы могут использовать (или переопределять) свойства и методы,
унаследованные от родительского класса.
Dog myDog = new Dog();
myDog.name = "Buddy";
myDog.eat();  // Этот метод унаследован от Animal
myDog.bark(); // Этот метод определен в Dog
- Переопределение методов:
Подклассы могут переопределить методы родительского класса, чтобы изменить их поведение.
Для этого используется аннотация @Override.
public class Cat extends Animal {
    @Override
    public void eat() {
        System.out.println(name + " is eating quietly.");
    }
}
В этом примере метод eat() переопределен в классе Cat.
- Вызов конструктора родительского класса:
Конструктор подкласса может вызвать конструктор родительского класса
с помощью ключевого слова super.
public class Dog extends Animal {
    public Dog(String name) {
        super(name); // Вызов конструктора родительского класса
    }
}
Это полезно, когда у родительского класса есть конструкторы с аргументами.
- Иерархия наследования:
Вы можете создавать целые иерархии классов,
где подклассы могут иметь свои собственные подклассы и так далее.
public class Labrador extends Dog {
    // ...
}
- Доступ к членам родительского класса:
В подклассах можно получить доступ к членам родительского класса
с использованием ключевого слова super.
public class Dog extends Animal {
    public void eat() {
        super.eat(); // Вызов метода родительского класса
        System.out.println(name + " is eating loudly.");
    }
}
- Для любого создаваемого подкласса разрешено указывать только один суперкласс.
Наследование нескольких суперклассов при создании одиночного
подкласса в языке Java не поддерживается