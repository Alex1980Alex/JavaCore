В Java динамическая диспетчеризация методов (dynamic method dispatch) -
это механизм, который позволяет вызывать методы объекта на этапе выполнения,
определяя метод для вызова на основе типа объекта, на который ссылается переменная.
Динамическая диспетчеризация обеспечивает полиморфизм в объектно-ориентированном программировании.
Вот как это работает:
- У вас должна быть иерархия классов с использованием наследования и переопределения методов.
Важно, чтобы методы, которые вы хотите вызвать динамически, были переопределены в подклассах.
- Вы создаете объект с использованием конкретного класса, но ссылаетесь на него через ссылку
на его суперкласс (или интерфейс).
- Когда вызывается метод на этом объекте через ссылку на суперкласс,
Java находит соответствующую реализацию метода в соответствующем подклассе объекта и выполняет ее.
Пример динамической диспетчеризации методов:
class Animal {
    void makeSound() {
        System.out.println("Животное издает звук");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Собака лает");
    }
}

class Cat extends Animal {
    @Override
    void makeSound() {
        System.out.println("Кошка мяучит");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        Animal myCat = new Cat();

        myDog.makeSound(); // Вызов метода из класса Dog: "Собака лает"
        myCat.makeSound(); // Вызов метода из класса Cat: "Кошка мяучит"
    }
}
В приведенном примере переменные myDog и myCat имеют тип Animal, но они ссылаются на объекты Dog
и Cat соответственно.
Когда вызывается метод makeSound() через ссылки типа Animal, Java определяет,
какая версия метода должна быть вызвана, исходя из типа объекта,
на который ссылается переменная. Это и есть динамическая диспетчеризация методов.
