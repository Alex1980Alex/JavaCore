В Java, классы, которые базируются на значениях, называются классами-обертками (wrapper classes).
Эти классы предоставляют оболочку (wrapper) для примитивных типов данных,
таких как int, double, char, и так далее, и позволяют работать с ними как с объектами.
Вот некоторые из наиболее часто используемых классов-оберток:
Integer: Обертка для целых чисел int.
Double: Обертка для чисел с плавающей запятой double.
Boolean: Обертка для логического типа boolean.
Character: Обертка для символов char.
Byte: Обертка для байтов byte.
Short: Обертка для коротких целых чисел short.
Long: Обертка для длинных целых чисел long.
Float: Обертка для чисел с плавающей запятой float.

Пример создания объекта класса-обертки и использования его методов:
Integer myInteger = new Integer(10); // Создание объекта Integer
int intValue = myInteger.intValue(); // Получение примитивного значения
System.out.println("Значение Integer: " + intValue);

Double myDouble = new Double(3.14); // Создание объекта Double
double doubleValue = myDouble.doubleValue(); // Получение примитивного значения
System.out.println("Значение Double: " + doubleValue);

Java также предоставляет удобные методы для автоупаковки (autoboxing)
и автораспаковки (unboxing) значений.
Например:
Integer autoBoxed = 42; // Автоупаковка int в Integer
int unboxed = autoBoxed; // Автораспаковка Integer в int

Эти классы-обертки полезны, когда требуется работать с примитивными типами данных в контексте,
где объекты необходимы, например, в коллекциях или при работе с обобщенными (generic) классами и методами.

Классы на основе значений не имеют идентификаторов. Поскольку они все еще являются классами в Java, нам нужно понять, как выполняются методы, унаследованные от класса Object :

- Реализации equals(), hashCode() и toString() определяются исключительно на основе значений его членов
экземпляра, а не их идентификаторов или состояния любого другого экземпляра
- Мы считаем два объекта равными исключительно при проверке equals() объектов,
а не при равенстве на основе ссылок, т.е. ==
- Если метод equals () устанавливает, что два экземпляра класса, основанного на значениях,
равны, то один экземпляр может применяться вместо другого.
- Кроме того, два одинаковых, но отдельно полученных экземпляра класса, основанного на значении,
могут фактически быть одним и тем же объектом
- Мы можем использовать два равных объекта взаимозаменяемо, и они должны давать один и тот
же результат при любом вычислении или вызове метода.
- Очень важно избегать использования экземпляров класса основанного на значении, для синхронизации.