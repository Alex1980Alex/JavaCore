package J_ВводВыводОператорTryСРесурсами.G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream.ПримерЧтенияФайлаTEST;
// Чтение файлов и класс FileInputStream
import java.io.*;
public class ReadFile {
    public static void main(String[] args) {

        // Для автоматического закрытия файла и освобождения ресурса объект создается
        // с помощью данной конструкции
        // создает новый объект FileInputStream и связывает его
        // с файлом "Test.txt" для чтения данных из этого файла.
        // FileInputStream: Это класс из пакета java.io, предназначенный для чтения данных из файла.
        // Он представляет поток для чтения байтовых данных из файла.
        // fin: Это имя переменной, в которой будет храниться ссылка на созданный объект FileInputStream.
        // Вы можете использовать это имя для взаимодействия с потоком чтения данных из файла.
        // "Test.txt": Это строка, представляющая имя файла, который вы хотите открыть для чтения.
        // В данном случае, "Test.txt" - это имя файла, с которым будет ассоциирован объект FileInputStream.
        try (FileInputStream fin = new FileInputStream("C:/Users/alext/OneDrive/Документы" +
                "/JavaCore/JavaCore/src/J_ВводВыводОператорTryСРесурсами" +
                "/G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream" +
                "/ПримерЧтенияФайлаTEST/Test.txt")) {

            System.out.println("File size: %d bytes \n" + fin.available());

            // Считываем каждый отдельный байт в переменную i
            int i = -1;
            // Это выражение часто используется при чтении данных из потока с использованием
            // FileInputStream (или других потоков ввода-вывода), чтобы проверить,
            // достигнут ли конец файла (EOF - End of File).
            // fin: Это ваш объект FileInputStream, представляющий поток чтения данных из файла.
            // .read(): Это метод объекта FileInputStream, который используется для чтения следующего
            // байта данных из потока. Метод read() возвращает значение типа int,
            // представляющее байт данных (от 0 до 255), либо -1, если достигнут конец файла.
            // (i = fin.read()): Это выражение, которое читает следующий байт из потока fin
            // и сохраняет его в переменной i.
            // != -1: Это сравнение. Выражение вернет true, если прочитанный байт i не равен -1,
            // что означает, что конец файла еще не достигнут.
            // Если достигнут конец файла, то метод read() возвращает -1, и выражение вернет false.
            while ((i = fin.read()) != -1) {
                System.out.print((char) i);
            }
            // Это исключение (exception) в Java, которое представляет собой общее исключение
            // для операций ввода-вывода (I/O), таких как чтение или запись файлов,
            // работа с сетью и другие вводо-выводные операции.
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }
}
