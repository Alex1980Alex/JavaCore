package J_ВводВыводОператорTryСРесурсами.G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream.СозданиеЧтениеОдногоФайлаИКопированиеВДругойФайл;
// Создание, чтение одного файла и копирование в другой файл по байтам
import java.io.*;
public class WriteReadSaveToFile {
    public static void main(String[] args) {

        String text = "Test\n1234"; // Входящая строка символов
        String path = "C:/Users/alext/OneDrive/Документы" +
                "/JavaCore/JavaCore/src/J_ВводВыводОператорTryСРесурсами" +
                "/G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream" +
                "/СозданиеЧтениеОдногоФайлаИКопированиеВДругойФайл/";
        //String path = "./Chapter13/"; // Путь к файлу
        String file = "File.txt"; // Имя файла
        String filesave = "FileSave.txt"; // Копия файла
        // Для автоматического закрытия файла и освобождения ресурса объект создается
        // с помощью данной конструкции
        // FileOutputStream - это класс из пакета java.io,
        // который предоставляет функциональность для записи данных в файлы.
        // fout будет представлять поток для записи данных в файл с именем "File.txt".
        // Вы можете использовать методы этого потока для записи байтовых данных в файл.
        try (FileOutputStream fout = new FileOutputStream(path + file); // Объект вывода для записи
             // создает новый объект FileInputStream и связывает его
             // с файлом "File.txt" для чтения данных из этого файла.
             // FileInputStream: Это класс из пакета java.io, предназначенный для чтения данных из файла.
             // Он представляет поток для чтения байтовых данных из файла.
             // finp: Это имя переменной, в которой будет храниться ссылка на созданный объект FileInputStream.
             // Вы можете использовать это имя для взаимодействия с потоком чтения данных из файла.
             // "File.txt": Это строка, представляющая имя файла, который вы хотите открыть для чтения.
             // В данном случае, "File.txt" - это имя файла, с которым будет ассоциирован объект FileInputStream.
             FileInputStream finp = new FileInputStream(path + file);
             FileOutputStream fsave = new FileOutputStream(path + filesave)) // Объект ввода для чтения
        {

            // Читаем и кодируем строку text в последовательность байтов,
            // сохраняем результат в новый массив байтов buffer.
            // создается массив байтов (byte[]) из строки text
            // - text: Это переменная или строка, которую вы хотите преобразовать в массив байтов.
            // - .getBytes(): Это метод объекта строки (String),
            // который используется для преобразования строки в массив байтов.
            // Если не указана кодировка, будет использована кодировка по умолчанию,
            // которая зависит от окружения выполнения Java.
            // - byte[] buffer: Это объявление массива байтов с именем buffer,
            // в который будут сохранены байты, представляющие строку text.
            byte[] buffer = text.getBytes();

            // Выводим размер массиа (количество байт буфера)
            System.out.println(buffer.length + " байт в строке для записи в файл:");

            // Запсисываем в объект fout из массива байтов buffer начиная со смещения 0 и до конца массива
            // Эта строка кода выполняет операцию записи всего содержимого массива buffer в поток FileOutputStream
            // fout: Это объект FileOutputStream, представляющий поток для записи данных в файл.
            // write: Это метод объекта FileOutputStream, который используется для записи данных в поток.
            // buffer: Это массив байтов (byte[]), из которого вы хотите записать данные в поток.
            // 0: Это начальная позиция (смещение) в массиве buffer, с которой начнется запись данных в поток.
            // В данном случае, запись начнется с самого начала массива (с индекса 0).
            // buffer.length: Это количество байтов, которые вы хотите записать из массива
            // buffer в поток. В данном случае, запись будет производиться на всю длину массива.
            fout.write(buffer, 0, buffer.length);

            // Читаем массив байтов и приводим к типу char для вывода в консоль
            for (int i : buffer) {
                System.out.print((char)i);
            }
            System.out.println("\nФайл записан успшено.\n");

            // Выводим количество байт потока
            System.out.println(finp.available() + " байт для чтения из файла:");

            // Читаем из объекта finp, начиная со смещения 0 и до конца и передаем в массив байтов buffer
            // метод read объекта FileInputStream в Java, который используется для чтения данных
            // из потока (FileInputStream) и записи их в массив байтов (buffer).
            // finp: Это ваш объект FileInputStream, который представляет поток чтения данных из файла.
            // .read(buffer, 0, buffer.length): Это вызов метода read на потоке fin.
            // В данном случае, методу передаются три аргумента:
            // - buffer: Это массив байтов (byte[]), в который будут записаны прочитанные данные.
            // - 0: Это начальное смещение в массиве buffer, с которого начнется запись
            // данных. В данном случае, запись начнется с начала массива (с индекса 0).
            // - buffer.length: Это количество байтов, которые будут считаны из потока и записаны
            // в массив buffer. В данном случае, будет считано столько байтов,
            // сколько имеется в массиве buffer.
            finp.read(buffer, 0, finp.available());

            // Читаем массив байтов и приводим к типу char для вывода в консоль
            for (int i : buffer) {
                System.out.print((char)i);
            }
            System.out.println("\nФайл прочтен успшено.\n");

            // Скопируем из буфера в новый файл
            // Запсисываем в объект fsave из массива байтов buffer начиная со смещения 0 и до конца массива
            // Эта строка кода выполняет операцию записи всего содержимого массива buffer в поток FileOutputStream
            // fsave: Это объект FileOutputStream, представляющий поток для записи данных в файл.
            // write: Это метод объекта FileOutputStream, который используется для записи данных в поток.
            // buffer: Это массив байтов (byte[]), из которого вы хотите записать данные в поток.
            // 0: Это начальная позиция (смещение) в массиве buffer, с которой начнется запись данных в поток.
            // В данном случае, запись начнется с самого начала массива (с индекса 0).
            // buffer.length: Это количество байтов, которые вы хотите записать из массива
            // buffer в поток. В данном случае, запись будет производиться на всю длину массива.
            fsave.write(buffer, 0, buffer.length);
            System.out.println("Копирование в новый файл " + filesave + " - выполнено успешно.");

            // Это исключение (exception) в Java, которое представляет собой общее исключение
            // для операций ввода-вывода (I/O), таких как чтение или запись файлов,
            // работа с сетью и другие вводо-выводные операции.
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
/* -------------------------------
9 байт в строке для записи в файл:
Test
1234
Файл записан успшено.

9 байт для чтения из файла:
Test
1234
Файл прочтен успшено.

Копирование в новый файл FileSave.txt - выполнено успешно.
 */
