package J_ВводВыводОператорTryСРесурсами.G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream.ПримерЧтениеИзОдногоИЗаписьВДругойФайл;
// Пример чтение из одного и запись в другой файл
import java.io.*;
public class ReadWriteFile {
    public static void main(String[] args) {
        // Для автоматического закрытия файла и освобождения ресурса объект создается
        // с помощью данной конструкции
        // создает новый объект FileInputStream и связывает его
        // с файлом "Test.txt" для чтения данных из этого файла.
        // FileInputStream: Это класс из пакета java.io, предназначенный для чтения данных из файла.
        // Он представляет поток для чтения байтовых данных из файла.
        // fin: Это имя переменной, в которой будет храниться ссылка на созданный объект FileInputStream.
        // Вы можете использовать это имя для взаимодействия с потоком чтения данных из файла.
        // "Test.txt": Это строка, представляющая имя файла, который вы хотите открыть для чтения.
        // В данном случае, "Test.txt" - это имя файла, с которым будет ассоциирован объект FileInputStream.
        try(FileInputStream fin = new FileInputStream("C:/Users/alext/OneDrive/Документы" +
                "/JavaCore/JavaCore/src/J_ВводВыводОператорTryСРесурсами" +
                "/G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream" +
                "/ПримерЧтениеИзОдногоИЗаписьВДругойФайл/Test.txt");
            // FileOutputStream - это класс из пакета java.io,
            // который предоставляет функциональность для записи данных в файлы.
            // fos будет представлять поток для записи данных в файл с именем "Test.txt".
            // Вы можете использовать методы этого потока для записи байтовых данных в файл.
            FileOutputStream fos = new FileOutputStream("C:/Users/alext/OneDrive/Документы" +
                    "/JavaCore/JavaCore/src/J_ВводВыводОператорTryСРесурсами" +
                    "/G_ЧтениеИЗаписьФайловFileInputStreamИFileOutputStream" +
                    "/ПримерЧтениеИзОдногоИЗаписьВДругойФайл/Test2.txt"))
        {
            // Этот код создает массив байтов (byte[]), который будет использоваться
            // для чтения данных из потока FileInputStream (fin)
            // fin: Это ваш объект FileInputStream, представляющий поток чтения данных из файла.
            // .available(): Это метод объекта FileInputStream, который возвращает количество байтов,
            // доступных для чтения без блокировки. Это не обязательно означает количество байтов в файле,
            // но скорее количество байтов, которые могут быть немедленно прочитаны из текущего
            // состояния потока без ожидания дополнительных данных.
            // fin.available(): Это вызов метода available() на вашем потоке
            // FileInputStream для определения количества доступных байтов.
            // byte[] buffer: Это объявление массива байтов с именем buffer, который будет использоваться
            // для хранения данных, считанных из потока.
            // Размер массива определяется результатом вызова fin.available(),
            // что позволяет создать массив с достаточным размером для хранения доступных данных.
            byte[] buffer = new byte[fin.available()];
            // считываем буфер
            // метод read объекта FileInputStream в Java, который используется для чтения данных
            // из потока (FileInputStream) и записи их в массив байтов (buffer).
            // fin: Это ваш объект FileInputStream, который представляет поток чтения данных из файла.
            // .read(buffer, 0, buffer.length): Это вызов метода read на потоке fin.
            // В данном случае, методу передаются три аргумента:
            // - buffer: Это массив байтов (byte[]), в который будут записаны прочитанные данные.
            // - 0: Это начальное смещение в массиве buffer, с которого начнется запись
            // данных. В данном случае, запись начнется с начала массива (с индекса 0).
            // - buffer.length: Это количество байтов, которые будут считаны из потока и записаны
            // в массив buffer. В данном случае, будет считано столько байтов,
            // сколько имеется в массиве buffer.
            fin.read(buffer, 0, buffer.length);
            // записываем из буфера в файл
            // метод write объекта FileOutputStream в Java, который используется для записи данных
            // из массива байтов (buffer) в поток (FileOutputStream).
            // fos: Это ваш объект FileOutputStream, представляющий поток для записи данных в файл.
            // .write(buffer, 0, buffer.length): Это вызов метода write на потоке fos.
            // В данном случае, методу передаются три аргумента:
            // - buffer: Это массив байтов (byte[]), из которого будут взяты данные для записи в поток.
            // - 0: Это начальное смещение в массиве buffer, с которого начнется запись данных.
            // В данном случае, запись начнется с начала массива (с индекса 0).
            // - buffer.length: Это количество байтов, которые будут записаны в поток из массива buffer.
            // В данном случае, будут записаны все байты из массива.
            fos.write(buffer, 0, buffer.length);
        }
        // Это исключение (exception) в Java, которое представляет собой общее исключение
        // для операций ввода-вывода (I/O), таких как чтение или запись файлов,
        // работа с сетью и другие вводо-выводные операции.
        catch(IOException ex){

            System.out.println(ex.getMessage());
        }
    }
}
