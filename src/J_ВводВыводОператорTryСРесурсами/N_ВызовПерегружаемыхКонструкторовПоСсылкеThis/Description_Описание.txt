Пользуясь перегружаемыми конструкторами, иногда удобно вызывать один конструктор из другого.
Для этого в Java имеется еще одна форма ключевого слова this.
В общем виде эта форма выглядит следующим образом:
this(список_аргументов)
По ссылке this() сначала выполняется перегружаемый конструктор, который соответствует заданному
списку_аргументов, а затем - любые операторы, находящиеся в теле исходного конструктора,
если таковые имеются. Вызов конструктора по ссылке this() должен быть первым оператором в конструкторе.
Рассмотрим сначала приведенный ниже пример класса, в котором ссылка this() не употребляется.

Этот класс содержит три конструктора, каждый из которых инициализирует значения полей а и b.
Первому конструктору передаются отдельные значения для инициализации полей а и b.
Второй конструктор принимает только одно значение и присваивает его обоим полям, а и b.
А третий присваивает полям а и b нулевое значение по умолчанию.
class MyClass {
   int a;
   int b;
   // инициализировать поля а и b по отдельности
   MyClass(int i, int j) {
       a = i;
       b = j;
   }
   // Инициализировать а и b одним и тем же значением.
   MyClass (int i) {
   а = i;
   b = i;
   // присвоить полям а и b нулевое значение по умолчанию
   MyClass() {
       a = 0;
       b = 0;
   }
}
Используя ссылку this(), приведенный выше класс MyClass можно переписать следующим образом.
В данной версии класса MyClass значения непосредственно присваиваются полям а и b только
в конструкторе MyClass (int, int).
А два других конструктора просто вызывают первый конструктор (прямо или косвенно) по ссылке this().
class MyClass {
   int a;
   int b;
   // инициализировать поля а и b по отдельности
   MyClass(int i, int j) {
       a = i;
       b = j;
   }
   // инициализировать поля а и b одним и тем же значением
   MyClass(int i) {
       this(i, i); // по этой ссылке вызывается конструктор MyClass(i, i);
   }
   // присвоить полям а и b нулевое значение по умолчанию
   MyClass() {
       this(0); // по этой ссылке вызывается конструктор MyClass(O)
   }
}
Одной из причин, по которой стоит вызывать перегружаемые конструкторы по ссылке this(),
служит потребность избежать дублирования кода. Зачастую сокращение дублированного кода ускоряет
загрузку классов, поскольку объектный код становится компактнее. Это особенно важно для программ,
доставляемых через Интернет, когда время их загрузки критично. Применение ссылки this() позволяет
также оптимально структурировать прикладной код, когда конструкторы содержат большой объем
дублированного кода.

Следует также иметь в виду, что вызов очень коротких конструкторов, как, например, из класса MyClass,
по ссылке this() зачастую лишь незначительно увеличивает размер объектного кода.
(В некоторых случаях никакого уменьшения объема объектного кода вообще не происходит.)
Дело в том, что байт-код, который устанавливается и возвращается из вызова конструктора
по ссылке this(), добавляет инструкции в объектный файл. Поэтому в таких случаях вызов
конструктора по ссылке this(), несмотря на исключение дублирования кода, не даст
значительной экономии времени загрузки, но может повлечь за собой дополнительные
издержки на создание каждого объекта. Поэтому ссылка this() больше всего подходит
для вызова тех конструкторов, которые содержат большой объем кода инициализации,
а не тех, которые просто устанавливают значения в нескольких полях.

Вызывая конструкторы по ссылке this(), следует учитывать следующее.
Вопервых, при вызове конструктора по ссылке this() нельзя использовать переменные экземпляра класса
этого конструктора.
И, во-вторых, в одном и том же конструкторе нельзя использовать ссылки super() и this(),
поскольку каждая из них должна быть первым оператором в конструкторе.