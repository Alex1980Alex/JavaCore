В версии JDK 7 появилась новая возможность, предлагающая иной способ управления такими ресурсами,
как потоки ввода-вывода в файлы: автоматическое завершение процесса.
Эту возможность иногда еще называют автоматическим управлением ресурсами (ARM),
и основывается она на усовершенствованной версии оператора try.
Главное преимущество автоматического управления ресурсами заключается в предотвращении ситуаций,
когда файл (или другой ресурс) не освобождается по невнимательности, если он больше не нужен.

Запомните: если забыть по какой-нибудь причине закрыть файл, это может привести к утечке памяти
и другим осложнениям. Ниже приведена усовершенствованная форма оператора try.
try (спецификация_ресурса) {
    // использование ресурса
}
Здесь спецификация_ресурса, как правило, обозначает оператор, объявляющий и инициализирующий
такой ресурс, как поток ввода-вывода данных в файл.

try (ResourceType1 resource1 = new ResourceType1(); ResourceType2 resource2 = new ResourceType2()) {
    // Код, который использует resource1 и resource2
} catch (Exception e) {
    // Обработка исключения, если оно возникло
}

Оператор try с ресурсами можно применять лишь вместе с теми ресурсами, в которых реализован
интерфейс AutoCloseable, определенный в пакете java.lang. В этом интерфейсе определен метод close(),
а наследует он от интерфейса Closeable из пакета java.io.
Оба интерфейса реализуются классами потоков ввода-вывода. Таким образом, оператор try с ресурсами
можно применять для работы с потоками ввода и вывода, в том числе и в файлы.

Ресурс, объявляемый в операторе try, неявно считается конечным. Это означает, что присвоить ресурс
после того, как он был создан, нельзя. Кроме того, область действия ресурса ограничивается
пределами оператора try с ресурсами.

В одном операторе try можно организовать управление несколькими ресурсами.
Для этого достаточно указать спецификацию каждого ресурса через точку с запятой.

У оператора try с ресурсами имеется еще одна особенность, о которой стоит упомянуть.
Когда выполняется блок оператора try, существует вероятность того, что исключение,
возникающее в блоке оператора try, приведет к другому исключению,
которое произойдет в тот момент, когда ресурс закрывается в блоке оператора finally.
Если это обычный оператор try, то первоначальное исключение теряется,
будучи вытесненным вторым исключением. А если используется оператор try с ресурсами,
то второе исключение подавляется, но не теряется.
Вместо этого оно добавляется в список подавленных исключений, связанных с первым исключением.
Доступ к списку подавленных исключений может быть пол учен с помощью метода gеtSupprеssеd(),
определенного в классе Throwаblе.