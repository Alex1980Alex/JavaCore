Для ввода-вывода данных в файлы чаще всего применяются классы FileInputStream и FileOutputStream,
которые создают потоки ввода-вывода байтов, связанные с файлами.
Чтобы открыть файл для ввода-вывода данных, достаточно создать объект одного из этих классов,
указав имя файла в качестве аргумента конструктора.
У обоих классов имеются и дополнительные конструкторы, но в представленных далее примерах будут
употребляться только следующие конструкторы:
FileInputStream(String имя_файла)
   throws FileNotFoundException
FileOutputStream(String имя_файла)
   throws FileNotFoundException

Здесь параметр имя_файла обозначает имя того файла, который требуется открыть.
Если при создании потока ввода файл не существует, то генерируется исключение типа FileNotFoundException.
А если при создании потока вывода файл нельзя открыть или создать, то и в этом случае генерируется
исключение типа FileNotFoundException.
Класс исключения FileNotFoundException является производным от класса IOException.
Когда файл открыт для вывода, любой файл, существовавший ранее под тем же самым именем, уничтожается.

Завершив работу с файлом, его нужно закрыть. Для этой цели служит метод close(),
реализованный в классах FileinputStream и FileOutputStream:
void close() throws IOException

Закрытие файла высвобождает выделенные для него системные ресурсы, позволяя использовать их для других файлов.
Неудачный исход закрытия файла может привести к "утечкам памяти",
поскольку неиспользуемые ресурсы оперативной памяти останутся выделенными.

Чтобы прочитать данные из файла, можно воспользоваться формой метода read(), определенной в классе
FileInputStream.
Та его форма, которая применяется в представленных далее примерах, выглядит следующим образом:
int read() throws IOException

Всякий раз, когда вызывается метод read(), он выполняет чтение одного байта из файла и возвращает ero
в виде целочисленного значения. А если достигнут конец файла, то возвращается значение -1.
Этот метод может сгенерировать исключение типа IOException.

В приведенном ниже примере программы метод read() применяется для ввода из файла,
содержащего текст в коде ASCII, который затем выводится на экран.
Имя файла указывается в качестве аргумента командной строки
java ShowFile TEST.txt

Для записи в файл можно воспользоваться методом writе(), определенным в классе FileOutputStream.
В своей простейшей форме этот метод выглядит следующим образом:
void write(int байтовое_значение) throws IOException

Этот метод записывает в файл байт, переданный ему в качестве параметра байтовое_значение.
Несмотря на то что параметр байтовое_значение объявлен как целочисленный,
в файл записываются только его младшие восемь бит. Если при записи возникает ошибка,
генерируется исключение типа IOException.