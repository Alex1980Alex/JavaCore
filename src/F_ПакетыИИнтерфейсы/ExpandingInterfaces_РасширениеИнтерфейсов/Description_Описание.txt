В Java вы можете расширить (или наследовать) интерфейсы, чтобы создать новый интерфейс,
который наследует методы и константы от одного или нескольких других интерфейсов.
Это называется "расширением интерфейсов" или "множественным наследованием интерфейсов".
Расширение интерфейсов позволяет создавать иерархии интерфейсов с общими методами и свойствами.

Для расширения интерфейсов используется ключевое слово extends.
Вот пример:
// Интерфейс, который будет расширен
interface Shape {
    void draw();
}

// Интерфейс, который расширяет Shape и добавляет новый метод
interface Colorable extends Shape {
    void setColor(String color);
}

// Интерфейс, который расширяет Colorable и добавляет еще один метод
interface Resizable extends Colorable {
    void resize(int percentage);
}
В этом примере:
1. Shape - это базовый интерфейс с методом draw.
2. Colorable расширяет Shape и добавляет метод setColor.
Теперь Colorable имеет как метод draw (унаследованный от Shape), так и метод setColor.
3. Resizable расширяет Colorable и добавляет метод resize.
Теперь Resizable имеет все методы из Shape, Colorable и Resizable.

Когда класс реализует интерфейс, он обязан предоставить реализации всех методов
из всех расширенных интерфейсов.
Например:

class Rectangle implements Resizable {
    private String color;

    @Override
    public void draw() {
        // Реализация метода draw для Rectangle
    }

    @Override
    public void setColor(String color) {
        this.color = color;
    }

    @Override
    public void resize(int percentage) {
        // Реализация метода resize для Rectangle
    }
}
Здесь класс Rectangle реализует интерфейс Resizable, который, в свою очередь,
расширяет другие интерфейсы.
Класс Rectangle должен предоставить реализации всех методов из этих интерфейсов.

Расширение интерфейсов в Java позволяет создавать более гибкие иерархии интерфейсов,
что упрощает организацию и повторное использование кода.





