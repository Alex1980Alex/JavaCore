В Java интерфейс (interface) представляет собой абстрактный шаблон,
который определяет набор методов, которые классы должны реализовать.
Интерфейсы используются для создания контрактов, которые классы обязаны соблюдать,
гарантируя наличие определенных методов.

Основные особенности интерфейсов в Java:
1.Объявление интерфейса:
Для объявления интерфейса используется ключевое слово interface.
public interface MyInterface {
    void method1();
    int method2();
}
2. Реализация интерфейса:
Классы могут реализовать (implement) интерфейс, обязаны предоставить реализацию всех методов,
определенных в интерфейсе.
Используйте ключевое слово implements:
public class MyClass implements MyInterface {
    @Override
    public void method1() {
        // Реализация метода 1
    }

    @Override
    public int method2() {
        // Реализация метода 2
        return 42;
    }
}
3. Множественная реализация интерфейсов:
Классы могут реализовать несколько интерфейсов, разделяя их имена запятой:
public class MyOtherClass implements MyInterface, AnotherInterface {
    // Реализация методов интерфейсов
}
4. Интерфейсы могут расширять другие интерфейсы:
Один интерфейс может расширять (extend) другой интерфейс, добавляя дополнительные методы:
public interface MyExtendedInterface extends MyInterface {
    void newMethod();
}
5. Интерфейсы могут содержать константы:
В интерфейсах можно объявлять переменные, которые автоматически считаются константами.
Они неявно являются final и static, т.е. не могут изменяться реализующим классом.
(константы в Java объявляются с модификатором final и инициализируются):
public interface Constants {
    int MAX_VALUE = 100;
    String APP_NAME = "MyApp";
}
6. Использование интерфейсов:
Интерфейсы часто используются в Java для создания общих интерфейсов,
которые реализуют разные классы.
Например, интерфейс Comparable используется для сравнения объектов,
а Runnable для представления задач, которые можно выполнить в потоке.
7. Лямбда-выражения и интерфейсы:
С Java 8 появилась возможность использовать лямбда-выражения для создания
анонимных реализаций интерфейсов,
имеющих только один абстрактный метод (функциональные интерфейсы).
Это упрощает написание обратных вызовов и асинхронного кода.
@FunctionalInterface
public interface MyFunctionalInterface {
    void doSomething();
}
8. Частичные реализации:
Если класс включает интерфейс, но не полностью реализует методы, требуемые этим интерфейсом,
то такой класс должен быть объявлен абстрактным.
Пример:
interface Callback {
void cal lback ( int param) ;
}
abstract class Incomplete implements Callback {
int а, Ь;
void show () {
System.out . println (a +"" + Ь ) ;
}
/ / ...
Здесь класс Incornplete не реализует метод callback () и должен быть
объявлен абстрактным. Любой класс, который наследует Incornplete, обязан
реализовывать callback () или сам должен быть объявлен как abstract.

Интерфейсы играют важную роль в Java, поскольку они позволяют реализовывать
абстрактные идеи и структуры, обеспечивая гибкость и расширяемость кода.
