Закрытые методы интерфейса (private interface methods) были введены в Java 9.
Они представляют собой методы, которые могут быть определены внутри интерфейса
и имеют модификатор доступа private.
Закрытые методы интерфейса полезны для разделения и упрощения сложных методов интерфейса,
позволяя избегать дублирования кода.

Основные характеристики закрытых методов интерфейса:
- Они объявляются с использованием ключевого слова private.
- Они могут иметь реализацию по умолчанию.
- Они не могут быть вызваны извне интерфейса и недоступны для классов, реализующих интерфейс.
- Они могут быть использованы другими методами внутри того же интерфейса
для разделения общей логики.

Пример интерфейса с закрытым методом:
public interface MyInterface {
    void regularMethod();

    default void defaultMethod() {
        System.out.println("Это стандартный метод интерфейса");
        privateMethod(); // Вызов закрытого метода
    }

    private void privateMethod() {
        System.out.println("Это закрытый метод интерфейса");
    }
}
В этом примере privateMethod() - это закрытый метод интерфейса MyInterface.
Он используется внутри метода defaultMethod(), но недоступен для вызова извне интерфейса
или в классах, реализующих интерфейс.

Закрытые методы интерфейса полезны для изоляции служебной логики
и предоставления ее для внутренних методов интерфейса, не раскрывая ее для внешних классов.
Это помогает улучшить читаемость и обслуживаемость кода в интерфейсах
с большим количеством методов и разделить общую логику между методами интерфейса.