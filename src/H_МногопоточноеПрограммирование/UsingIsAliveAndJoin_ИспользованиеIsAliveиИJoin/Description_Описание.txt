Методы isAlive() и join() в Java используются для управления выполнением потоков и определения
их состояния.
Вот как они работают:
1. isAlive(): Метод isAlive() вызывается на объекте потока и возвращает true,
если поток все еще активен и выполняется, и false, если поток завершил выполнение.
Пример использования isAlive():
Thread myThread = new Thread(() -> {
    // Какой-то код внутри потока
});

myThread.start();

// Проверка, выполняется ли поток
if (myThread.isAlive()) {
    System.out.println("Поток все еще выполняется.");
} else {
    System.out.println("Поток завершил выполнение.");
}
2. join(): Метод join() вызывается на объекте потока и ожидает, пока этот поток завершит выполнение.
Если поток уже завершил выполнение, метод join() немедленно возвращает управление.
Пример использования join():
Thread myThread = new Thread(() -> {
    // Какой-то код внутри потока
});

myThread.start();

try {
    myThread.join(); // Ожидаем завершения потока
    System.out.println("Поток завершил выполнение.");
} catch (InterruptedException e) {
    System.err.println("Произошла ошибка во время ожидания потока.");
}
join() может быть полезен, когда вам нужно дождаться завершения выполнения определенного потока,
прежде чем продолжить выполнение основного потока.
Это может быть полезно, например, для синхронизации результатов работы нескольких потоков.

Обратите внимание, что использование join() может вызвать блокировку потока,
который вызывает этот метод, пока поток, на котором он вызывается,
не завершит выполнение или не произойдет исключение типа InterruptedException.
 Поэтому обязательно обрабатывайте исключение InterruptedException, как показано во втором примере.





