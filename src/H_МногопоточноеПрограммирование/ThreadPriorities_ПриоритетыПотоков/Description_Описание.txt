В Java потоки имеют приоритеты, которые определяют их относительный приоритет выполнения
относительно других потоков.
Приоритеты потоков представлены целыми числами в диапазоне от 1 до 10,
где 1 - это наименьший приоритет, а 10 - наивысший приоритет.
По умолчанию все потоки имеют приоритет нормального уровня, который обычно соответствует 5.
Вы можете установить приоритет потока с помощью метода setPriority(int priority) класса Thread,
где priority - это числовое значение приоритета.
А для того чтобы получить текущее значение приоритета потока исполнения,
достаточно вызвать метод getPriority() из класса Thread.
Например:
Thread thread1 = new Thread(() -> {
    // Код для потока 1
});

Thread thread2 = new Thread(() -> {
    // Код для потока 2
});

thread1.setPriority(Thread.MIN_PRIORITY); // Установка минимального приоритета (1)
thread2.setPriority(Thread.MAX_PRIORITY); // Установка максимального приоритета (10)

thread1.start();
thread2.start();

Также можно использовать константы, определенные в классе Thread, чтобы установить приоритеты,
например, Thread.MIN_PRIORITY, Thread.NORM_PRIORITY (по умолчанию), и Thread.MAX_PRIORITY.

Важно отметить, что установка приоритетов потоков может варьироваться в зависимости от операционной
системы, и не всегда гарантируется точное выполнение приоритетов.
Кроме того, слишком интенсивное использование приоритетов может привести к нестабильности системы,
поэтому старайтесь использовать их разумно и обдуманно.

Используйте приоритеты потоков только в тех случаях, когда это действительно необходимо,
и предпочтительно использовать другие механизмы синхронизации и управления выполнением,
такие как synchronized, wait(), notify(), Semaphore и другие.





