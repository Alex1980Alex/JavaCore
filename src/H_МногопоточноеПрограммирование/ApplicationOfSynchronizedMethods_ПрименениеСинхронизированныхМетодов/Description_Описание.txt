Синхронизация потоков в Java используется для обеспечения корректного и безопасного доступа
нескольких потоков к общим ресурсам или критическим участкам кода.
Без синхронизации может возникнуть состязательная ситуация (race condition)
или гонка данных (data race), что может привести к непредсказуемому поведению и ошибкам.

1. Синхронизированные методы
В Java синхронизированные методы позволяют обеспечивать безопасный доступ к общим ресурсам
из нескольких потоков. Синхронизация методов делается с использованием ключевого слова synchronized.
Когда метод объявлен как синхронизированный, только один поток может выполнить его в один момент времени,
остальные потоки будут ожидать завершения выполнения метода.
Вот пример синхронизированного метода:
public synchronized void synchronizedMethod() {
    // Код, который нужно синхронизировать
}
Здесь synchronized используется перед объявлением метода, что указывает на то,
что этот метод будет синхронизированным. Когда один поток входит в этот метод,
он захватывает блокировку метода, и никакой другой поток не может выполнить этот метод до тех пор,
пока блокировка не будет освобождена.
Пример использования синхронизированного метода в классе:
public class SynchronizedExample {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public synchronized int getCount() {
        return count;
    }
}
В этом примере методы increment() и getCount() синхронизированы.
Это означает, что их можно вызывать безопасно из разных потоков,
и не будет состязательных ситуаций при одновременном доступе к переменной count.

Синхронизированные методы удобны в использовании, но они могут вызвать некоторое замедление
производительности в случае, если много потоков часто пытаются получить доступ к ним.
В таких случаях можно рассмотреть альтернативные механизмы синхронизации,
такие как использование блокировок (Locks) из пакета java.util.concurrent,
чтобы более точно управлять доступом к ресурсам и уменьшить конкуренцию.

2. Синхронизированные блоки:
Оператор synchronized используется для синхронизации конкретного блока кода.
Вы определяете объект-монитор, который будет использоваться для синхронизации,
и только один поток сможет выполнять этот блок кода, если он захватил монитор.
synchronized (монитор) {
    // Код, который нужно синхронизировать
}
Пример использования синхронизированного блока:
public void someMethod() {
    // Несинхронизированный код

    synchronized (this) { // В данном случае, объект-монитором является текущий объект (this)
        // Код, который нужно синхронизировать
    }

    // Несинхронизированный код
}
