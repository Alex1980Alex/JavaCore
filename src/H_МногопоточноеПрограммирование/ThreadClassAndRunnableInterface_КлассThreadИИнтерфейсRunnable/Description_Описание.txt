В Java класс Thread и интерфейс Runnable являются двумя основными механизмами для создания и
управления потоками выполнения. Они предоставляют средства для параллельного выполнения кода
в многопоточных приложениях.
1. Класс Thread:
https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Thread.html
Thread - это класс в Java, который представляет собой отдельный поток выполнения.
Вы можете создать экземпляр этого класса и вызвать его метод start() для запуска выполнения
кода в новом потоке.
Пример:
class MyThread extends Thread {
    public void run() {
        // Код, который будет выполняться в потоке
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread thread = new MyThread();
        thread.start();
    }
}
Когда метод run() завершает выполнение, поток также завершается.

Методы управления потоками исполнения из класса Thread:
getName	    Получает имя потока исполнения
getPriority	Получает приоритет потока исполнения
isAlive	    Определяет, выполняется ли поток
join	    Ожидает завершения потока исполнения
run	        Задает точку входа в поток исполнения
sleep	    Приостанавливает выполнение потока на заданное время
start	    Запускает поток, вызывая ero метод run()

2. Интерфейс Runnable:
https://docs.oracle.com/en/java/javase/20/docs/api/java.base/java/lang/Runnable.html
Runnable - это интерфейс в Java, который определяет метод run().
Вы можете создать класс, который реализует этот интерфейс и передать экземпляр такого класса
в конструктор класса Thread. Это позволяет более гибко управлять ресурсами и разделять
код между потоками.
Пример:
class MyRunnable implements Runnable {
    public void run() {
        // Код, который будет выполняться в потоке
    }
}

public class Main {
    public static void main(String[] args) {
        MyRunnable runnable = new MyRunnable();
        Thread thread = new Thread(runnable);
        thread.start();
    }
}
Преимущество использования интерфейса Runnable заключается в том, что класс,
реализующий этот интерфейс, может также наследовать другие классы или выполнять другие действия,
что обеспечивает более гибкую структуру кода.

Использование Runnable обычно предпочтительнее, так как позволяет избежать ограничения
на множественное наследование в Java и сделать код более модульным.
Вы можете создавать множество объектов Runnable и передавать их в потоки для выполнения
различных задач параллельно.

Кроме того, существует другой способ создания потоков в Java, используя лямбда-выражения
или анонимные классы, что может сделать код более компактным и читаемым.





