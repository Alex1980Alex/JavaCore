Многопоточность
Многопоточность - это особая форма многозадачности, которая делит один процесс
(одну выполняющуюся программу) на несколько потоков исполнения.
Все потоки исполнения выполняются одновременно и каждый поток задает отдельный путь исполнения кода.
Существуют два отдельных вида многозадачности: многозадачность на основе процессов и многозадачность
на основе * потоков *.

Многозадачность на основе процессов - это средство, которое позволяет одновременно выполнять
несколько программ на компьютер. Процессы являются крупными задачами, каждой из которых требуется
свое адресное пространство. Связь между * процессами * ограничена и обходится дорого.
Переключение контекста с одного процесса на другой также обходится дорого.

Потоки исполнения более просты. Они совместно используют одно и то же адресное пространство
и один и тот же крупный процесс. Связь между потоками исполнения обходится недорого, как, впрочем,
и переключение контекста с одного потока исполнения на другой.
Еще одним преимуществом многопоточности является сведение к минимуму времени ожидания.

В однопоточных средах прикладной программе приходится ожидать завершения таких задач,
прежде чем переходить к следующей задаче, даже если большую часть времени программа простаивает,
ожидая ввода.
Многопоточность помогает сократить простои, поскольку в то время, как один поток исполнения ожидает -
другой может выполняться.

Приоритеты потоков
Приоритет потока исполнения служит для принятия решения при переходе от одного потока к другому.
Это так называемое переключение контекста. Правила, которые определяют, когда должно происходить
переключение контекста:
- Поток может добровольно уступить управление. Для этого достаточно явно уступить очередь на
исполнение, приостановить или блокировать поток на время ожидания ввода-вывода.
В этом случае все прочие потоки исполнения проверяются, а ресурсы ЦП передаются потоку,
имеющему наибольший приоритет и готовому к выполнению.
- Один поток исполнения может быть вытеснен другим, более приоритетным потоком.
В этом случае низкоприоритетный поток исполнения, который не уступает ЦП, просто вытесняется
высокоприоритетным потоком, независимо от того, что он делает.
По существу, высокоприоритетный поток выполняется, как только это ему потребуется.
Это так называемая вытесняющая многозадачность (или многозадачность с приоритетами).

Синхронизация
Если требуется, чтобы два потока исполнения взаимодействовали и совместно использовали
сложную структуру данных вроде связного списка, необходимо исключить возможный конфликт
между этими потоками, т.е. предотвратить запись данных в одном потоке исполнения,
когда в другом потоке исполнения выполняется их чтение.
Для этой цели в Java реализован монитор.
У каждого объекта имеется свой неявный монитор, вход в который осуществляется автоматически,
когда для этого объекта вызывается синхронизированный метод.
Когда поток исполнения находится в теле синхронизированного метода, ни один другой поток
исполнения не может вызвать какой-нибудь другой * синхронизированный метод * для того
же самого объекта.
Это позволяет писать ясный и краткий многопоточный код, поскольку поддержка синхронизации
встроена в сам язык.

Обмен сообщениями
Система обмена сообщениями в Java позволяет потоку исполнения войти в синхронизированный
метод объекта и ожидать до тех пор, пока какой-нибудь другой поток явно не уведомит его об
освобождении требующихся ресурсов.